import java.util.*;

public class HangmanManager {
    private Set<String> words;
    private Set<Character> guesses;
    private int guessesLeft;
    private String pattern;

    // Constructor to initialize the HangmanManager
    public HangmanManager(Collection<String> dictionary, int length, int max) {
        if (length < 1 || max < 0) {
            throw new IllegalArgumentException("Word length and max guesses must be positive.");
        }

        this.words = new TreeSet<>();
        for (String word : dictionary) {
            if (word.length() == length) {
                words.add(word);
            }
        }

        if (words.isEmpty()) {
            throw new IllegalStateException("No words of the specified length in the dictionary.");
        }

        this.guesses = new TreeSet<>();
        this.guessesLeft = max;
        this.pattern = "-".repeat(length).replaceAll("", " ").trim();
    }

    // Returns the current set of words
    public Set<String> words() {
        return words;
    }

    // Returns the number of guesses left
    public int guessesLeft() {
        return guessesLeft;
    }

    // Returns the set of letters guessed by the player
    public Set<Character> guesses() {
        return guesses;
    }

    // Returns the current pattern to be displayed for the hangman game
    public String pattern() {
        if (words.isEmpty()) {
            throw new IllegalStateException("No words available.");
        }
        return pattern;
    }

    // Records a new guess by the player and updates the game state
    public int record(char guess) {
        if (guessesLeft < 1 || words.isEmpty()) {
            throw new IllegalStateException("Game over or no words left.");
        }
        if (guesses.contains(guess)) {
            throw new IllegalArgumentException("Character already guessed.");
        }

        guesses.add(guess);
        Map<String, Set<String>> families = groupWordsByPattern(guess);

        String bestPattern = selectBestPattern(families);
        words = families.get(bestPattern);
        int occurrences = countOccurrences(bestPattern, guess);

        if (occurrences == 0) {
            guessesLeft--;
        }

        pattern = bestPattern;
        return occurrences;
    }

    // Helper method to group words by pattern based on the current guess
    private Map<String, Set<String>> groupWordsByPattern(char guess) {
        Map<String, Set<String>> families = new TreeMap<>();
        for (String word : words) {
            String pattern = createPattern(word, guess);
            families.putIfAbsent(pattern, new TreeSet<>());
            families.get(pattern).add(word);
        }
        return families;
    }

    // Helper method to create a pattern for a word based on the guessed letter
    private String createPattern(String word, char guess) {
        StringBuilder patternBuilder = new StringBuilder();
        for (char c : word.toCharArray()) {
            if (guesses.contains(c) || c == guess) {
                patternBuilder.append(c);
            } else {
                patternBuilder.append("-");
            }
            patternBuilder.append(" ");
        }
        return patternBuilder.toString().trim();
    }

    // Helper method to select the largest family pattern
    private String selectBestPattern(Map<String, Set<String>> families) {
        String bestPattern = null;
        int maxFamilySize = 0;
        for (Map.Entry<String, Set<String>> entry : families.entrySet()) {
            if (entry.getValue().size() > maxFamilySize) {
                bestPattern = entry.getKey();
                maxFamilySize = entry.getValue().size();
            }
        }
        return bestPattern;
    }

    // Helper method to count occurrences of the guessed letter in the pattern
    private int countOccurrences(String pattern, char guess) {
        int count = 0;
        for (char c : pattern.toCharArray()) {
            if (c == guess) {
                count++;
            }
        }
        return count;
    }
}
